import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile
from ics import Calendar, Event
from config import BOT_TOKEN, ADMIN_USERNAME

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)s %(message)s')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite
conn = sqlite3.connect('bookings.db')
c = conn.cursor()
c.execute('''
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT,
        date TEXT,
        start_time TEXT,
        end_time TEXT,
        comment TEXT
    )
''')
conn.commit()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–ª—å—Ç–∞–Ω–∫–∏ üèïÔ∏è\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/book ‚Äî –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∞–ª—å—Ç–∞–Ω–∫—É\n"
        "/schedule ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
        "/admin ‚Äî –∞–¥–º—ñ–Ω-–º–µ–Ω—é"
    )

@dp.message_handler(commands=['book'])
async def cmd_book(message: types.Message):
    await message.reply(
        "–í–≤–µ–¥—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`YYYY-MM-DD HH:MM HH:MM –ö–æ–º–µ–Ω—Ç–∞—Ä (–æ–ø—Ü—ñ–π–Ω–æ)`\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "`2025-08-10 14:00 17:00 –ó—É—Å—Ç—Ä—ñ—á –∑ —Å—ñ–º‚Äô—î—é`",
        parse_mode="Markdown"
    )

@dp.message_handler(commands=['schedule'])
async def cmd_schedule(message: types.Message):
    c.execute("SELECT id, date, start_time, end_time, username, comment FROM bookings ORDER BY date, start_time")
    rows = c.fetchall()
    if not rows:
        await message.reply("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        return
    lines = ["–ì—Ä–∞—Ñ—ñ–∫ –±—Ä–æ–Ω—é–≤–∞–Ω—å:"]
    for bid, date, st, et, user, comment in rows:
        line = f"[{bid}] {date} {st}‚Äì{et} –≤—ñ–¥ @{user}"
        if comment:
            line += f" ‚Äî {comment}"
        lines.append(line)
    await message.reply("\n".join(lines))

@dp.message_handler(lambda m: m.text and m.text.count(' ') >= 3)
async def handler_save(message: types.Message):
    parts = message.text.split(' ', 3)
    date_str, start_str, end_str = parts[0], parts[1], parts[2]
    comment = parts[3] if len(parts) > 3 else ''
    try:
        datetime.strptime(date_str, '%Y-%m-%d')
        datetime.strptime(start_str, '%H:%M')
        datetime.strptime(end_str, '%H:%M')
    except ValueError:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏/—á–∞—Å—É –Ω–µ–≤—ñ—Ä–Ω–∏–π.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É
    c.execute("""
        SELECT COUNT(*) FROM bookings
        WHERE date=?
          AND ((start_time<=? AND end_time>?)
            OR (start_time<? AND end_time>=?))
    """, (date_str, start_str, start_str, end_str, end_str))
    if c.fetchone()[0] > 0:
        await message.reply("‚ö†Ô∏è –¶–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π.")
        return

    username = message.from_user.username or str(message.from_user.id)
    c.execute("INSERT INTO bookings(username, date, start_time, end_time, comment) VALUES(?,?,?,?,?)",
              (username, date_str, start_str, end_str, comment))
    conn.commit()
    bid = c.lastrowid

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è .ics
    cal = Calendar()
    ev = Event()
    ev.name = "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–ª—å—Ç–∞–Ω–∫–∏"
    ev.begin = f"{date_str}T{start_str}:00"
    ev.end = f"{date_str}T{end_str}:00"
    ev.description = f"@{username}\n{comment}"
    cal.events.add(ev)
    ics_file = f"booking_{bid}.ics"
    with open(ics_file, 'w', encoding='utf-8') as f:
        f.writelines(cal)

    await message.reply(f"‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è #{bid} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    await message.reply_document(InputFile(ics_file))

@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        return await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    await message.reply(
        "–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:\n"
        "/schedule ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
        "/delete <id> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"
    )

@dp.message_handler(lambda m: m.text and m.text.startswith('/delete '))
async def cmd_delete(message: types.Message):
    if message.from_user.username != ADMIN_USERNAME:
        return await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    try:
        bid = int(message.text.split()[1])
    except:
        return await message.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delete <id>")
    c.execute("DELETE FROM bookings WHERE id=?", (bid,))
    if c.rowcount == 0:
        await message.reply(f"‚ùå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è #{bid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    else:
        conn.commit()
        await message.reply(f"‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è #{bid} –≤–∏–¥–∞–ª–µ–Ω–æ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
