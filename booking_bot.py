import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
BOT_TOKEN = "8346638943:AAHY4JVG3jyoWMW33z3wvx_ltx9XmKOI-LQ"  # <-- –í—Å—Ç–∞–≤—Ç–µ —Å—é–¥–∏ —Ç–æ–∫–µ–Ω –≤—ñ–¥ BotFather

# –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å. –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ü–µ –±—É–¥–µ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö.
# –§–æ—Ä–º–∞—Ç: { "YYYY-MM-DD HH:MM": user_id }
bookings = {}

# --- –õ–æ–≥—ñ–∫–∞ –±–æ—Ç–∞ ---

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
def get_available_slots():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."""
    slots = []
    now = datetime.now()
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ª–æ—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ 10:00 –¥–æ 21:00
    for hour in range(10, 22):
        slot_time = now.replace(hour=hour, minute=0, second=0, microsecond=0)
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ª–æ—Ç–∏, —è–∫—ñ —â–µ –Ω–µ –ø—Ä–æ–π—à–ª–∏
        if slot_time > now:
            slots.append(slot_time.strftime("%Y-%m-%d %H:%M"))
    return slots

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∞–ª—å—Ç–∞–Ω–∫—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/book - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ —Ç–∞ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏\n"
        "/mybookings - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /book
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ –∫–Ω–æ–ø–æ–∫."""
    available_slots = get_available_slots()
    
    keyboard = []
    for slot in available_slots:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ª–æ—Ç –Ω–µ –∑–∞–π–Ω—è—Ç–∏–π
        if slot not in bookings:
            # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: "15:00", –¥–∞–Ω—ñ, —â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç—å—Å—è: "book_2025-08-06 15:00"
            button_text = datetime.strptime(slot, "%Y-%m-%d %H:%M").strftime("%H:%M")
            callback_data = f"book_{slot}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    if not keyboard:
        await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–µ–º–∞—î. üòî")
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–ª—å–Ω–∏–π —á–∞—Å –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –û–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∑–∞–ø–∏—Ç

    # –†–æ–∑–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ, —â–æ –ø—Ä–∏–π—à–ª–∏ –∑ –∫–Ω–æ–ø–∫–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "book_2025-08-06 15:00"
    action, value = query.data.split("_", 1)

    if action == "book":
        user_id = query.from_user.id
        user_name = query.from_user.full_name

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑, —Ä–∞–ø—Ç–æ–º —Ö—Ç–æ—Å—å –∑–∞–±—Ä–æ–Ω—é–≤–∞–≤, –ø–æ–∫–∏ –≤–∏ –æ–±–∏—Ä–∞–ª–∏
        if value in bookings:
            await query.edit_message_text(text=f"–ù–∞ –∂–∞–ª—å, —á–∞—Å {value} –≤–∂–µ —Ö—Ç–æ—Å—å –≤—Å—Ç–∏–≥ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏. üò•")
            return

        # –ó–∞–ø–∏—Å—É—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        bookings[value] = {"id": user_id, "name": user_name}
        booked_time = datetime.strptime(value, "%Y-%m-%d %H:%M").strftime("%d.%m –æ %H:%M")
        await query.edit_message_text(text=f"‚úÖ –ß—É–¥–æ–≤–æ! –ê–ª—å—Ç–∞–Ω–∫—É –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –Ω–∞ {booked_time}.")
        print(f"–ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: {value} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_name} ({user_id})") # –¥–ª—è –ª–æ–≥—ñ–≤

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /mybookings
async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = update.message.from_user.id
    user_active_bookings = []
    for slot, booking_info in bookings.items():
        if booking_info["id"] == user_id:
            # –ü–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
            if datetime.strptime(slot, "%Y-%m-%d %H:%M") > datetime.now():
                user_active_bookings.append(slot)
    
    if not user_active_bookings:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
    else:
        bookings_text = "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n"
        for slot in sorted(user_active_bookings):
            bookings_text += f"- {datetime.strptime(slot, '%Y-%m-%d %H:%M').strftime('%d.%m.%Y –æ %H:%M')}\n"
        await update.message.reply_text(bookings_text)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ —Ç–∞ –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("book", book))
    application.add_handler(CommandHandler("mybookings", my_bookings))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == "__main__":
    main()