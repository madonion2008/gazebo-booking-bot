# booking_bot.py

import logging
import sqlite3
from datetime import datetime
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from ics import Calendar, Event

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  –í–°–¢–ê–í–¢–ï –°–í–Ü–ô –¢–û–ö–ï–ù –¢–£–¢  ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
BOT_TOKEN = "8346638943:AAHY4JVG3jyoWMW33z3wvx_ltx9XmKOI-LQ"
ADMIN_USERNAME = "plo_anton"    # –±–µ–∑ @

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ SQLite
conn = sqlite3.connect("bookings.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT,
        date TEXT,
        start_time TEXT,
        end_time TEXT,
        comment TEXT
    )
""")
conn.commit()


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–ª—å—Ç–∞–Ω–∫–∏ üèïÔ∏è\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/book ‚Äî –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∞–ª—å—Ç–∞–Ω–∫—É\n"
        "/schedule ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
        "/admin ‚Äî –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –º–µ–Ω—é"
    )


# /book
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`YYYY-MM-DD HH:MM HH:MM –ö–æ–º–µ–Ω—Ç–∞—Ä (–æ–ø—Ü—ñ–π–Ω–æ)`\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "`2025-08-10 14:00 17:00 –ó—É—Å—Ç—Ä—ñ—á –∑ —Å—ñ–º‚Äô—î—é`",
        parse_mode="Markdown",
    )


# /schedule
async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    c.execute("SELECT id, date, start_time, end_time, username, comment FROM bookings ORDER BY date, start_time")
    rows = c.fetchall()
    if not rows:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
        return
    lines = ["–ì—Ä–∞—Ñ—ñ–∫ –±—Ä–æ–Ω—é–≤–∞–Ω—å:"]
    for bid, date, st, et, user, comment in rows:
        line = f"[{bid}] {date} {st}‚Äì{et} –≤—ñ–¥ @{user}"
        if comment:
            line += f" ‚Äî {comment}"
        lines.append(line)
    await update.message.reply_text("\n".join(lines))


# Save booking (–æ–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É)
async def save_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    parts = text.split(" ", 3)
    if len(parts) < 3:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ /book –∑–Ω–æ–≤—É.")
        return

    date_str, start_str, end_str = parts[0], parts[1], parts[2]
    comment = parts[3] if len(parts) > 3 else ""

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
    try:
        datetime.strptime(date_str, "%Y-%m-%d")
        datetime.strptime(start_str, "%H:%M")
        datetime.strptime(end_str, "%H:%M")
    except ValueError:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏/—á–∞—Å—É –Ω–µ–≤—ñ—Ä–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    c.execute("""
        SELECT COUNT(*) FROM bookings
        WHERE date=?
          AND ((start_time<=? AND end_time>?)
               OR (start_time<? AND end_time>=?))
    """, (date_str, start_str, start_str, end_str, end_str))
    if c.fetchone()[0] > 0:
        await update.message.reply_text("‚ö†Ô∏è –¶–µ–π —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")
        return

    username = update.message.from_user.username or str(update.message.from_user.id)
    c.execute("""
        INSERT INTO bookings(username, date, start_time, end_time, comment)
        VALUES(?,?,?,?,?)
    """, (username, date_str, start_str, end_str, comment))
    conn.commit()
    bid = c.lastrowid

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è .ics
    cal = Calendar()
    ev = Event()
    ev.name = "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∞–ª—å—Ç–∞–Ω–∫–∏"
    ev.begin = f"{date_str}T{start_str}:00"
    ev.end = f"{date_str}T{end_str}:00"
    ev.description = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{username}\n{comment}"
    cal.events.add(ev)
    ics
