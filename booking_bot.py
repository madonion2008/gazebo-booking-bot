import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
BOT_TOKEN = "8346638943:AAHY4JVG3jyoWMW33z3wvx_ltx9XmKOI-LQ"  # <-- –í—Å—Ç–∞–≤—Ç–µ —Å—é–¥–∏ —Ç–æ–∫–µ–Ω –≤—ñ–¥ BotFather

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å. –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ü–µ –±—É–¥–µ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö.
# –§–æ—Ä–º–∞—Ç: { "YYYY-MM-DD HH:MM": {"id": user_id, "name": user_name} }
bookings = {}

# --- –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á ---

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∞–ª—å—Ç–∞–Ω–∫—É.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/book - –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∞–ª—å—Ç–∞–Ω–∫—É\n"
        "/mybookings - –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (—Ç—É—Ç –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏)\n"
        "/view_bookings - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ –¥–∞—Ç—É"
    )

# –ö—Ä–æ–∫ 1 –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: –≤–∏–±—ñ—Ä –¥–Ω—è
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –¥–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–Ω–∞ 7 –¥–Ω—ñ–≤ —É–ø–µ—Ä–µ–¥)."""
    keyboard = []
    today = datetime.now()
    for i in range(7):
        day = today + timedelta(days=i)
        date_str = day.strftime("%Y-%m-%d")
        button_text = day.strftime("%A, %d.%m") # –ù–∞–ø—Ä. "–°–µ—Ä–µ–¥–∞, 06.08"
        callback_data = f"select_day_{date_str}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

# –ü–µ—Ä–µ–≥–ª—è–¥ —Å–≤–æ—ó—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å
async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—É—î –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."""
    user_id = update.message.from_user.id
    user_active_bookings = []
    
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    for slot, booking_info in bookings.items():
        if booking_info["id"] == user_id and datetime.strptime(slot, "%Y-%m-%d %H:%M") > datetime.now():
            user_active_bookings.append(slot)
    
    if not user_active_bookings:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")
        return

    keyboard = []
    for slot in sorted(user_active_bookings):
        slot_dt = datetime.strptime(slot, "%Y-%m-%d %H:%M")
        button_text = f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ {slot_dt.strftime('%d.%m –æ %H:%M')}"
        callback_data = f"cancel_{slot}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=reply_markup)

# –ü–µ—Ä–µ–≥–ª—è–¥ —É—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def view_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö—Ä–æ–∫ 1: –ü—Ä–æ—Å–∏—Ç—å –æ–±—Ä–∞—Ç–∏ –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å."""
    keyboard = []
    today = datetime.now()
    for i in range(7):
        day = today + timedelta(days=i)
        date_str = day.strftime("%Y-%m-%d")
        button_text = day.strftime("%A, %d.%m")
        callback_data = f"view_day_{date_str}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±—Ä–æ–Ω—é–≤–∞–Ω—å:", reply_markup=reply_markup)


# --- –û–ë–†–û–ë–ù–ò–ö –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –ù–ê –ö–ù–û–ü–ö–ò (Callback) ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    data = query.data
    
    # --- –õ–æ–≥—ñ–∫–∞ –≤–∏–±–æ—Ä—É –¥–Ω—è —ñ –ø–æ–∫–∞–∑—É —Å–ª–æ—Ç—ñ–≤ ---
    if data.startswith("select_day_"):
        date_str = data.split("_")[2]
        day = datetime.strptime(date_str, "%Y-%m-%d")
        
        keyboard = []
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ª–æ—Ç–∏ –∑ 10:00 –¥–æ 21:00 –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è
        for hour in range(10, 22):
            slot_dt = day.replace(hour=hour, minute=0, second=0, microsecond=0)
            slot_str = slot_dt.strftime("%Y-%m-%d %H:%M")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∞–π–±—É—Ç–Ω—ñ —Å–ª–æ—Ç–∏
            if slot_dt > datetime.now():
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ª–æ—Ç –≤—ñ–ª—å–Ω–∏–π
                if slot_str not in bookings:
                    button_text = slot_dt.strftime("%H:%M")
                    callback_data = f"book_{slot_str}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

        if not keyboard:
            await query.edit_message_text(text=f"–ù–∞ {day.strftime('%d.%m')} –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –Ω–µ–º–∞—î. üòî")
            return

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"–û–±–µ—Ä—ñ—Ç—å –≤—ñ–ª—å–Ω–∏–π —á–∞—Å –Ω–∞ {day.strftime('%d.%m')}:", reply_markup=reply_markup)

    # --- –õ–æ–≥—ñ–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ---
    elif data.startswith("book_"):
        slot_str = data.replace("book_", "")
        user_id = query.from_user.id
        user_name = query.from_user.full_name

        if slot_str in bookings:
            await query.edit_message_text(text=f"–ù–∞ –∂–∞–ª—å, —Ü–µ–π —á–∞—Å –≤–∂–µ —Ö—Ç–æ—Å—å –≤—Å—Ç–∏–≥ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏. üò•")
            return

        bookings[slot_str] = {"id": user_id, "name": user_name}
        booked_time = datetime.strptime(slot_str, "%Y-%m-%d %H:%M").strftime("%d.%m –æ %H:%M")
        await query.edit_message_text(text=f"‚úÖ –ß—É–¥–æ–≤–æ! –ê–ª—å—Ç–∞–Ω–∫—É –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –Ω–∞ {booked_time}.")
        print(f"–ù–æ–≤–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: {slot_str} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_name} ({user_id})")

    # --- –õ–æ–≥—ñ–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ---
    elif data.startswith("cancel_"):
        slot_to_cancel = data.replace("cancel_", "")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if slot_to_cancel in bookings and bookings[slot_to_cancel]["id"] == query.from_user.id:
            del bookings[slot_to_cancel]
            cancelled_time = datetime.strptime(slot_to_cancel, "%Y-%m-%d %H:%M").strftime("%d.%m –æ %H:%M")
            await query.edit_message_text(text=f"‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {cancelled_time} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            print(f"–°–∫–∞—Å–æ–≤–∞–Ω–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: {slot_to_cancel}")
        else:
            await query.edit_message_text(text="–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –≤–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–µ.")

    # --- –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å –Ω–∞ –¥–µ–Ω—å ---
    elif data.startswith("view_day_"):
        date_str = data.split("_")[2]
        
        day_bookings = []
        for slot, info in bookings.items():
            if slot.startswith(date_str):
                day_bookings.append((slot, info))
        
        if not day_bookings:
            await query.edit_message_text(text=f"–ù–∞ {datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m')} –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
            return
            
        response_text = f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ {datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')}:\n\n"
        for slot, info in sorted(day_bookings):
            time = datetime.strptime(slot, "%Y-%m-%d %H:%M").strftime("%H:%M")
            user_name = info.get('name', 'N/A')
            response_text += f"‚Ä¢ {time} - {user_name}\n"
            
        await query.edit_message_text(text=response_text)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("book", book))
    application.add_handler(CommandHandler("mybookings", my_bookings))
    application.add_handler(CommandHandler("view_bookings", view_bookings))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == "__main__":
    main()